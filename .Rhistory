install.packages(Seurat)
install.packages('Seurat')
install.packages('WGCNA')
?WGCNA
install.packages('impute')
list("hi"=1)
?save.csv
install.packages("XLConnect")
sessionInfo()
library(WGCNA)
install.packages(WGCNA)
install.packages('WGCNA')
?match
?where
?mapply
?vapply
?matrix
list_of_string = list()
?strsplit
strsplit(c("This_is_great"), "_")
split(c("this_is_great"),")")
split(c("this_is_great"),"_")
?split
?strsplit
a = list(1,2)
a
a[[1]] <- 343
a
b <- a
b[[1]] = 0.4
a
x <- c(as = "asfef", qu = "qwerty", "yuiop[", "b", "stuff.blah.yech")
strsplit(x, "e")
c("yuiop[")
gsub("hello", "Bongiorno", "Hello world")
gsub("hello", "Bongiorno", "Hello world", ignore.case =T )
grep("[a-z]", letters)
[a-z]
"[a-z]"
letters
grep("[^0-9]", numbers)
grep("[^0-9]", c(1,2,3,4,5,6,7,8,10))
grep("[0-9]", c(1,2,3,4,5,6,7,8,10))
grep("[^0-9]", c("a", 1))
grep("[^0-9]", c("a", 1, "b", 2))
grep("[^letters]", c(1,2,3,4, "a", "b"))
grep("[^letters]", c(1,2,3,4, "a", "b", "letters"))
grep("[^a-z]", c(1,2,3,4, "a", "b", "letters"))
in <- c(1,2,3,4, "a", "b", "boom")
suga <- c(1,2,3,4, "a", "b", "boom")
gsub("[^a-z", "", sugar)
gsub("[^a-z", "", suga)
gsub("[^a-z", "", suga)
gsub("[^a-z]", "", suga)
sugar = "this is a long and winding string: it has 5 numbers (1,2,3,4) and lots of whitespace and special characters such as # [ insert ] "
gsub("[^a-z]", "", sugar)
x <- sugar
strsplit(gsub("[^a-z]", ",", x),",")
strsplit(gsub("[^a-z]", " ", x)," ")
x
x = strsplit(gsub(" ", "ASPACEHERE", x)
out = strsplit(gsub("[^a-z]", "", x),"ASPACEHERE")
# TODO break string into
return()
}
function read_file() {
list_of_string = list()
# TODO read in file
# TODO break string into tu
return(list_of_string)
}
function string_to_node() {
# Need to manipulate an object in place
return()
}
#==============================================================================
function create_edge() {
return()
}
#==============================================================================
function activate() {
return()
}
function display_active() {
return()
}
function update_edge() {
return()
}
x = strsplit(gsub(" ", "ASPACEHERE", x)
out = strsplit(gsub("[^a-z]", "", x),"ASPACEHERE")
# TODO break string into
return()
}
function read_file() {
list_of_string = list()
# TODO read in file
# TODO break string into tu
return(list_of_string)
}
function string_to_node() {
# Need to manipulate an object in place
return()
}
#==============================================================================
function create_edge() {
return()
}
#==============================================================================
function activate() {
return()
}
function display_active() {
return()
}
function update_edge() {
return()
}
x = strsplit(gsub(" ", "ASPACEHERE", x)
)
x = gsub(" ", "ASPACEHERE", x)
x
out = strsplit(gsub("[^a-z]", "", x),"ASPACEHERE")
out
x
sugar = "this is a long and winding string: it has 5 numbers (1,2,3,4) and lots of whitespace and special characters such as # [ insert ] "
x <- sugar
x = gsub(" ", "ASPACEHERE", x)
x
?gsub
out = strsplit(gsub("[^a-z]", "", x, ignore.case=T),"ASPACEHERE")
out
suppressMessages(library(magrittr))
?? common words
x
sugar = "this is a long and winding string: it has 5 numbers (1,2,3,4) and lots of whitespace and special characters such as # [ insert ] "
function clean_split(x) {
# Usage:
# args:
# returns:
out <-
gsub(" ", "ASPACEHERE", x) %>%
gsub("[^a-z]", "", x, ignore.case=T) %>%
strsplit("ASPACEHERE")
out[c("and", "or", "not", "is", "do", "if", "this", "")] <- NULL # TODO get common words
return(out)
}
clean_split = function(x) {
# Usage:
# args:
# returns:
out <-
gsub(" ", "ASPACEHERE", x) %>%
gsub("[^a-z]", "", x, ignore.case=T) %>%
strsplit("ASPACEHERE")
out[c("and", "or", "not", "is", "do", "if", "this", "")] <- NULL # TODO get common words
return(out)
}
cleansplit(sugar)
clean_split(sugar)
gsub(" ", "ASPACEHERE", sugar)
y <- gsub(" ", "ASPACEHERE", sugar)
gsub("[^a-z]", "", y, ignore.case=T)
z <- gsub("[^a-z]", "", y, ignore.case=T)
z <- strsplit(z, "ASPACEHERE")
z
?filter
?clean
?strip
z[z == c("and", "or", "not", "is", "do", "if", "this", "")] <- NULL
z
clean_split = function(x) {
# Usage:
# args:
# returns:
y <-
gsub(" ", "ASPACEHERE", x) %>%
gsub("[^a-z]", "", ignore.case=T) %>%
strsplit("ASPACEHERE") %>%
unlist()
y[y %in% c("and", "or", "not", "is", "do", "if", "this", "")] <- NULL # TODO get common words
return(y)
}
clean_split(sugar)
gsub(" ", "ASPACEHERE", suga)
gsub(" ", "ASPACEHERE", sugar)
gsub("[^a-z]", "", gsub(" ", "ASPACEHERE", sugar), ignore.case=T)
Y = gsub("[^a-z]", "", gsub(" ", "ASPACEHERE", sugar), ignore.case=T)
Z = strsplit(Y, "ASPACEHERE")
Z
Z <- unlist(Z)
Z
Z[Z %in% c("and", "or", "not", "is", "do", "if", "this", "")] <- NULL # TODO get common words
y <- Z
y <- y[!y %in% c("and", "or", "not", "is", "do", "if", "this", "")] # TODO get common words
y
y <- y[!y %in% c("a", "it", "as", "then", "why", "how", "and", "or", "not", "is", "do", "if", "this", "")] # TODO get common words
y
?intersect
Sys.time()
x <- Sys.time()
Sys.time - x
x
?sys.time
?Sys.time
proc.time()
x <- proc.time()
proc.time() - x
s()
suppressMessages(library(readtext))
?add
Sys.time()
x <- Sys.time()
typeof(x)
x[[1]]
x[[2]]
x[1
[]
x[1]
x[2]
as.numeric(Sys.time())
as.numeric(Sys.time())
asPOSIX.it(as.numeric(Sys.time()))
as.POSIXlt(as.numeric(Sys.time()))
c(1,2,3)[2] <- NULL
c(1,2,3)[2]
c(1,"ba",3)[2] <- NULL
adjacency = matrix()
?matrix
?dist
types = character()
?append
grep("a", c("b", "b"))
grep("a", c("b", "a"))
grepl("a", c("b", "a"))
?list
typeof({})
typeof({"a" = 2})
c = {"a" = 2}
c
typeof(c)
c[["a"]]
c["a"]
c$"a"
c = list("a"=c("dan"))
c[[a]]
c[["a"]]
install.packages(igraph)
install.packages("igraph")
?as.double
x = matrix(data=c("a","b","c","d"), nrow=2,ncol=2)
x
y = matrix(data=c("42","12","22","2"), nrow=2,ncol=2)
normalize = function(x) {
return(as.double(x/sum(x)))
}
normalize(y)
y <- numeric(y)
y <- as.numeric(y)
normalize = function(x) {
return(as.numeric(x/sum(x)))
}
normalize(y)
?? Exponential
?vapply
x <- matrix(c(1,2,3,6), nrow=2, ncol=2)
x
x <- rbind(x, c(1,2))
x
myList <- list(1,"a", "b")
10 %>% *2
10 %>% '*'2
exp(-1)
exp(-0.5)
exp(-0.1)
MYLIST = list(1,2, "c", c(1,3,3))
names(MYLIST)
intersect
?intersect
??geometric mean
??geometric
stopwords <- read.csv(sprintf("%sstop-word-list.csv", dir_data))
dir_data = "/Users/rkm916/Sync/KnowledgeBase/"
stopwords <- read.csv(sprintf("%sstop-word-list.csv", dir_data))
setwd(dir_data)
stopwords <- read.csv(file=sprintf("%sstop-word-list.csv", dir_data))
stopwords
length(stopwords)
class(stopworda)
class(stopwords)
stopwords <- read.delim(file=sprintf("%sstop-word-list.csv", dir_data), sep=",")
stopwords
class(stopwords)
x <- tuple(c(1,2))
x <- (c(1,2))
class(x)
typeof(x)
0L
exp(20)/(1+exp(20))
as.double(z)
as.double(2)
?apply
z = 4
m = array(c(1,2,3,4), dim=c(2,2))
m
sum(rowsum(apply(m, MARGIN=c(1,2), FUN=exp)))
denom <- sum(rowSum(apply(m, MARGIN=c(1,2), FUN=exp)))
apply(m, MARGIN=c(1,2), FUN=exp)
rowSums(apply(m, MARGIN=c(1,2), FUN=exp))
sum(rowSums(apply(m, MARGIN=c(1,2), FUN=exp)))
exp(as.double(z))
numer <- exp(z)
denom <- sum(rowSums(apply(m, MARGIN=c(1,2), FUN=exp)))
numer/denom
suppressMessages(library(magrittr))
x = c("Hello you young girl. What brings you and your donkey here today?")
x %>% gsub(" ", "ASPACEHERE", x)
x
x <-  x %>% gsub(" ", "ASPACEHERE", x)
x
x
x = c("Hello you young girl. What brings you and your donkey here today?")
y <- x %>% gsub(" ", "ASPACEHERE")
t
y
x
?gsub
gsub("?", "??????", x)
gsub("?", "??????", x)
gsub("?", "!", x)
gsub("young", "!", x)
gsub(" ", "ASPACEHERE", x)
y <- x %>% gsub(" ", "ASPACEHERE")
y
gsub(" ", "ASPACEHERE",x)
gsub(" ", "ASPACEHERE",x) %>% gsub("[^a-z]", "", ignore.case=T)
y <- gsub(" ", "ASPACEHERE",x)
y
y <- gsub("[^a-z]", "", y,  ignore.case=T)
y
y <- strsplit(y, "ASPACEHERE")
y
y <- unlist(y)
y
y <- y[!y %in% stopwords]
y
!y %in% stopwords
stopwords
stopwords <- as.character(read.delim(file=sprintf("%sstop-word-list.csv", dir_data), sep=","))
stopwords
stopwords <- read.csv(file=sprintf("%sstop-word-list.csv", dir_data))
stopwords
stopwords <- as.character(read.csv(file=sprintf("%sstop-word-list.csv", dir_data)))
stopwords
?read.csv
stopwords <- read.csv(file=sprintf("%sstop-word-list.csv", dir_data, stringsAsFactors=F))
stopwords
stopwords <- read.csv(file=sprintf("%sstop-word-list.csv", dir_data, stringsAsFactors=F, colClasses="character", strip.white=T))
stopwords
stopwords <- as.character(read.csv(file=sprintf("%sstop-word-list.csv", dir_data, stringsAsFactors=F, colClasses="character", strip.white=T))_
stopwords <- as.character(read.csv(file=sprintf("%sstop-word-list.csv", dir_data, stringsAsFactors=F, colClasses="character", strip.white=T))
stopwords
stopwords
class(stopwords)
class(stopwords)[1]
class(stopwords)[2]
?readChar
stopwords <- as.character(readChar(con=sprintf("%sstop-word-list.csv", dir_data))
stopwords <- readChar(con=sprintf("%sstop-word-list.csv", dir_data))
stopwords <- readChar(con=sprintf("%sstop-word-list.csv", dir_data))
stopwords <- readChar(con=sprintf("%sstop-word-list.csv", dir_data), nchars=1)
stopwords
stopwords <- readChar(con=sprintf("%sstop-word-list.csv", dir_data), nchars=1000)
stopwords
split("Hi there", " ")
?split
?strsplit
stopwords <- strsplit(readChar(con=sprintf("%sstop-word-list.csv", dir_data), nchars=10000), split=" ,")
stopwords
stopwords <- strsplit(readChar(con=sprintf("%sstop-word-list.csv", dir_data), nchars=10000), split=",")
stopwords
stopwords <- gsub(" ", "", stopwords)
stopwords
stopwords <- strsplit(readChar(con=sprintf("%sstop-word-list.csv", dir_data), nchars=10000), split=",")
stopwords
stopwords <- vapply(stopwords, function(x) = gsub(" ", ""))
stopwords <- vapply(stopwords, function(x) gsub(" ", ""))
?vapply
stopwords <- sapply(stopwords, function(x) gsub(" ", ""))
stopwords <- sapply(stopwords, function(x) gsub(" ", "",x))
stopwords
stopwords <- vapply(stopwords, function(x) gsub(" ", "",x))
stopwords <- strsplit(readChar(con=sprintf("%sstop-word-list.csv", dir_data), nchars=10000), split=",")
stopwords <- vapply(stopwords, function(x) gsub(" ", "",x))
stopwords <- sapply(stopwords, function(x) gsub(" ", "",x), simplify=T)
stopwords <- strsplit(readChar(con=sprintf("%sstop-word-list.csv", dir_data), nchars=10000), split=",")
stopwords <- sapply(stopwords, function(x) gsub(" ", "",x), simplify=T)
stopwords
?as.vector
stopwords <- strsplit(readChar(con=sprintf("%sstop-word-list.csv", dir_data), nchars=10000), split=",")
stopwords <- as.vector(sapply(stopwords, function(x) gsub(" ", "",x), simplify=T))
stopwords
